Easy. BinaryGap
Find longest sequence of zeros in binary representation of an integer.
Task description
A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N.

For example, number 9 has binary representation 1001 and contains a binary gap of length 2. The number 529 has binary representation 1000010001 and contains two binary gaps: one of length 4 and one of length 3. The number 20 has binary representation 10100 and contains one binary gap of length 1. The number 15 has binary representation 1111 and has no binary gaps.

Write a function:

def solution(N)

that, given a positive integer N, returns the length of its longest binary gap. The function should return 0 if N doesn't contain a binary gap.

For example, given N = 1041 the function should return 5, because N has binary representation 10000010001 and so its longest binary gap is of length 5.

Assume that:

N is an integer within the range [1..2,147,483,647].
Complexity:

expected worst-case time complexity is O(log(N));
expected worst-case space complexity is O(1).

def solution(N):
    i = N
    max_gap = 0
    zero_count = 0
    startCount = False
    endCount = False
    while(i != 0):
        remainder = i % 2
        i = i / 2
        if remainder == 1:
            startCount = True
        if startCount and not endCount and remainder == 1:
            endCount = True
        if remainder == 0 and startCount:
            zero_count += 1
        if remainder == 1 and startCount and endCount:
            max_gap = max(zero_count, max_gap)
            zero_count = 0
            endCount = False
    return max_gap

def solution(N):
    max_gap = 0
    gap = 0
    while(N % 2 == 0):
        N = N /2
    while (N > 0):
        if N % 2 != 0:
            max_gap = max(max_gap, gap)
            gap = 0
        else:
            gap += 1
        N = N / 2
    return max_gap

=============================================================
Easy. OddOccurrencesInArray
Find value that occurs in odd number of elements.
A non-empty zero-indexed array A consisting of N integers is given. The array contains an odd number of elements, and each element of the array can be paired with another element that has the same value, except for one element that is left unpaired.

For example, in array A such that:

  A[0] = 9  A[1] = 3  A[2] = 9
  A[3] = 3  A[4] = 9  A[5] = 7
  A[6] = 9
the elements at indexes 0 and 2 have value 9,
the elements at indexes 1 and 3 have value 3,
the elements at indexes 4 and 6 have value 9,
the element at index 5 has value 7 and is unpaired.
Write a function:

def solution(A)

that, given an array A consisting of N integers fulfilling the above conditions, returns the value of the unpaired element.

For example, given array A such that:

  A[0] = 9  A[1] = 3  A[2] = 9
  A[3] = 3  A[4] = 9  A[5] = 7
  A[6] = 9
the function should return 7, as explained in the example above.

Assume that:

N is an odd integer within the range [1..1,000,000];
each element of array A is an integer within the range [1..1,000,000,000];
all but one of the values in A occur an even number of times.
Complexity:

expected worst-case time complexity is O(N);
expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
Elements of input arrays can be modified.

def solution(A):
    # write your code in Python 2.7
    count_dict = {}
    for value in A:
        count_dict[value] = count_dict.get(value, 0) + 1
    for k, v in count_dict.items():
        if v == 1 or v % 2 != 0:
            return k
    return -1

def solution(A):
    elem = 0
    for i in A:
        elem ^= i
    return elem

=============================================================
1. CyclicRotation
Rotate an array to the right by a given number of steps.

Task description
A zero-indexed array A consisting of N integers is given. Rotation of the array means that each element is shifted right by one index, and the last element of the array is also moved to the first place.

For example, the rotation of array A = [3, 8, 9, 7, 6] is [6, 3, 8, 9, 7]. The goal is to rotate array A K times; that is, each element of A will be shifted to the right by K indexes.

Write a function:

def solution(A, K)

that, given a zero-indexed array A consisting of N integers and an integer K, returns the array A rotated K times.

For example, given array A = [3, 8, 9, 7, 6] and K = 3, the function should return [9, 7, 6, 3, 8].

def solution(A, K):
    # write your code in Python 2.7
    n = len(A)
    if n == 0:
        return A
    else:
        return A[n-(K%n):] + A[:n-(K%n)]


=============================================================
Medium. Equi
Find an index in an array such that its prefix sum equals its suffix sum.

A zero-indexed array A consisting of N integers is given. An equilibrium index of this array is any integer P such that 0 ≤ P < N and the sum of elements of lower indices is equal to the sum of elements of higher indices, i.e. 

A[0] + A[1] + ... + A[P−1] = A[P+1] + ... + A[N−2] + A[N−1].

Sum of zero elements is assumed to be equal to 0. This can happen if P = 0 or if P = N−1.
For example, consider the following array A consisting of N = 8 elements:
A[0] = -1 A[1] = 3 A[2] = -4 A[3] = 5 A[4] = 1 A[5] = -6 A[6] = 2 A[7] = 1P = 1 is an equilibrium index of this array, because:

    * A[0] = −1 = A[2] + A[3] + A[4] + A[5] + A[6] + A[7]

P = 3 is an equilibrium index of this array, because:

    * A[0] + A[1] + A[2] = −2 = A[4] + A[5] + A[6] + A[7]

P = 7 is also an equilibrium index, because:

    * A[0] + A[1] + A[2] + A[3] + A[4] + A[5] + A[6] = 0

and there are no elements with indices greater than 7.
P = 8 is not an equilibrium index, because it does not fulfill the condition 0 ≤ P < N.
Write a function:
def solution(A)
that, given a zero-indexed array A consisting of N integers, returns any of its equilibrium indices. The function should return −1 if no equilibrium index exists.
For example, given array A shown above, the function may return 1, 3 or 7, as explained above.
Assume that:

    * N is an integer within the range [0..100,000];
    * each element of array A is an integer within the range [−2,147,483,648..2,147,483,647].

Complexity:

    * expected worst-case time complexity is O(N);
    * expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).

Elements of input arrays can be modified.


def solution(A):
    # write your code in Python 2.7
    total = sum(A)
    sum_left = 0
    for i, v in enumerate(A):
        sum_right = total - v - sum_left
        if sum_left == sum_right:
            return i
        sum_left += v
    return -1



Easy. PermMissingElem
Find the missing element in a given permutation.
Task description
A zero-indexed array A consisting of N different integers is given. The array contains integers in the range [1..(N + 1)], which means that exactly one element is missing.

Your goal is to find that missing element.

Write a function:

def solution(A)

that, given a zero-indexed array A, returns the value of the missing element.

For example, given array A such that:

  A[0] = 2
  A[1] = 3
  A[2] = 1
  A[3] = 5
the function should return 4, as it is the missing element.

Assume that:

N is an integer within the range [0..100,000];
the elements of A are all distinct;
each element of array A is an integer within the range [1..(N + 1)].
Complexity:

expected worst-case time complexity is O(N);
expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).

def solution(A):
    if len(A) == 0 or A is None:
        return 1
    maxNum = max(A)
    minNum = min(A)
    height = maxNum - minNum + 1 
    ideal_sum = (maxNum + minNum) * height / 2
    real_sum = sum(A)
    missing_num = ideal_sum - real_sum
    if missing_num == 0 and minNum == 1:
        return maxNum + 1
    if missing_num == 0 and minNum != 1:
        return minNum - 1
    return missing_num

Easy. TapeEquilibrium
A non-empty zero-indexed array A consisting of N integers is given. Array A represents numbers on a tape.

Any integer P, such that 0 < P < N, splits this tape into two non-empty parts: A[0], A[1], ..., A[P − 1] and A[P], A[P + 1], ..., A[N − 1].

The difference between the two parts is the value of: |(A[0] + A[1] + ... + A[P − 1]) − (A[P] + A[P + 1] + ... + A[N − 1])|

In other words, it is the absolute difference between the sum of the first part and the sum of the second part.

For example, consider array A such that:

  A[0] = 3
  A[1] = 1
  A[2] = 2
  A[3] = 4
  A[4] = 3
We can split this tape in four places:

P = 1, difference = |3 − 10| = 7 
P = 2, difference = |4 − 9| = 5 
P = 3, difference = |6 − 7| = 1 
P = 4, difference = |10 − 3| = 7 
Write a function:

def solution(A)

that, given a non-empty zero-indexed array A of N integers, returns the minimal difference that can be achieved.

For example, given:

  A[0] = 3
  A[1] = 1
  A[2] = 2
  A[3] = 4
  A[4] = 3
the function should return 1, as explained above.

Assume that:

N is an integer within the range [2..100,000];
each element of array A is an integer within the range [−1,000..1,000].
Complexity:

expected worst-case time complexity is O(N);
expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).

def solution(A):
    total = sum(A)
    min_diff = None
    sum_part1 = 0
    sum_part2 = total
    for i in xrange(len(A) - 1):
        sum_part1 += A[i]
        sum_part2 -= A[i]
        diff = abs(sum_part1 - sum_part2)
        if min_diff is None:
            min_diff = diff
        else:
            min_diff = min(min_diff, diff)
    return min_diff    